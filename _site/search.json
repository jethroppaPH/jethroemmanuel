[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Plotting gonado-somatic index in R\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nJethro Emmanuel\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing fish gonadal stages with R\n\n\n\n\n\n\n\n\n\n\n\nJan 27, 2023\n\n\nJethro Emmanuel\n\n\n\n\n\n\n\n\n\n\n\n\nLength and weight relationship using R\n\n\n\n\n\n\n\n\n\n\n\nJan 16, 2023\n\n\nJethro Emmanuel\n\n\n\n\n\n\n\n\n\n\n\n\nCreate pie charts that show the composition of tuna landed catch on a map in R\n\n\n\n\n\n\n\n\n\n\n\nMay 30, 2018\n\n\nJethro Emmanuel\n\n\n\n\n\n\n\n\n\n\n\n\nSmall multiple charts for length frequency distribution\n\n\n\n\n\n\n\n\n\n\n\nJan 25, 2018\n\n\nJethro Emmanuel\n\n\n\n\n\n\n\n\n\n\n\n\nHistogram of length frequency distribution\n\n\n\n\n\n\n\n\n\n\n\nDec 16, 2017\n\n\nJethro Emmanuel\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-01-16-length-weight-relationship-using-r/index.html",
    "href": "posts/2023-01-16-length-weight-relationship-using-r/index.html",
    "title": "Length and weight relationship using R",
    "section": "",
    "text": "Introduction\nHave you ever wondered how the size of a fish relates to its weight? This simple question is at the heart of an important concept in fisheries science known as the length-weight relationship. By understanding how a fish’s length correlates with its weight, scientists can gain valuable insights into the health, growth patterns, and overall condition of fish populations.\nIn fisheries science, the length-weight relationship is a fundamental tool. It helps researchers and managers assess fish stocks, monitor environmental changes, and make decisions to support sustainable fishing practices. For example, changes in this relationship can indicate shifts in fish growth due to factors like habitat quality or fishing pressure.\nIn this blog post, we’ll explore how to analyze the length-weight relationship of fish using R, a versatile tool for data analysis. Let’s dive in and discover how this relationship can help us understand and manage our fish populations better.\n\n\nRequired package\nIn this tutorial, we will be using the data.table package, which, according to their website, “provides a high-performance version of base R’s data.frame with syntax and feature enhancements for ease of use, convenience and programming speed. To learn more about this package, visit the documentation website at https://rdatatable.gitlab.io/data.table/index.html\n\nlibrary(data.table)\n\n\n\nThe data\nIn this tutorial, we will use a sample data of a particular species, and for the purpose of this post, we will assign this as “Species X.” The data is available here.\n\nspeciesx &lt;- fread(\"reproductive-biology-data.csv\")\n\nBefore proceeding to processing and analysis, one should not forget to inspect the data. The head() function in base R is used to retrieve the first few rows of a data frame or a matrix, or the first few elements of a vector. This function is useful for quickly inspecting the structure and content of a dataset.\n\nhead(speciesx)\n\n    year  month   day length weight    sex maturity gonad_weight   gsi\n   &lt;int&gt; &lt;char&gt; &lt;int&gt;  &lt;num&gt;  &lt;num&gt; &lt;char&gt;   &lt;char&gt;        &lt;num&gt; &lt;num&gt;\n1:  2017    Jan     6   19.2   57.4      M       II          0.2 0.348\n2:  2017    Jan     6   17.7   40.8      M       II          0.2 0.490\n3:  2017    Jan     6   16.9   40.6      F       II          0.2 0.493\n4:  2017    Jan     6   19.8   80.8      F       II          0.4 0.495\n5:  2017    Jan     6   17.9   42.5      F       II          0.3 0.706\n6:  2017    Jan     6   18.3   47.6      M      III          0.5 1.050\n\n\nThe str() function in base R stands for “structure” and is used to display the internal structure of R objects. It provides a concise summary of the object’s type and structure, including its components and their types.\n\nstr(speciesx)\n\nClasses 'data.table' and 'data.frame':  1299 obs. of  9 variables:\n $ year        : int  2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 ...\n $ month       : chr  \"Jan\" \"Jan\" \"Jan\" \"Jan\" ...\n $ day         : int  6 6 6 6 6 6 6 6 6 6 ...\n $ length      : num  19.2 17.7 16.9 19.8 17.9 18.3 19.5 16.7 17.1 19.9 ...\n $ weight      : num  57.4 40.8 40.6 80.8 42.5 47.6 67.6 33.9 38.3 59.4 ...\n $ sex         : chr  \"M\" \"M\" \"F\" \"F\" ...\n $ maturity    : chr  \"II\" \"II\" \"II\" \"II\" ...\n $ gonad_weight: num  0.2 0.2 0.2 0.4 0.3 0.5 1.5 0.4 0.3 1.4 ...\n $ gsi         : num  0.348 0.49 0.493 0.495 0.706 ...\n - attr(*, \".internal.selfref\")=&lt;externalptr&gt; \n\n\n\n\nData processing\nBased on the results of the above functions, some variables are needed to be converted to a particular data type. Conversion is needed later for the analysis and the preparation of graphs.\nThe first step is to convert the sex column from character to factor. Let us first examine the unique values in this column.\n\nunique(speciesx$sex)\n\nWe can see that there are two unique values in this column: F and M, corresponding to female and male, respectively.\nThen use the factor() function to convert this to a factor. The factor() function is used to create a categorical or factor variable from a vector of values. Factors are used to represent categorical data, where each unique value in the vector is assigned a level, which is an integer representation. This is especially useful for statistical analysis and plotting, as it enables the correct handling of categorical variables.\n\nspeciesx[, sex := factor(sex, levels = c(\"M\", \"F\"), labels = c(\"M\", \"F\"))]\n\nNow that we are done with the data processing, we will now proceed to data visualization.\n\n\nLength-weight relationship\nThe Length-Weight Relationship (LWR) is a fundamental tool in fisheries research, stock assessment, and reproductive biology studies. It establishes the relationship between the length and weight of an individual fish and is a powerful indicator of growth patterns and body condition within a population.\nIt is widely used to estimate fish weight based on length data, especially in situations where measuring weight for every fish is impractical. It’s valuable for surveys and assessments, helping analyze growth rates, size structure, and population changes. In reproductive biology, LWR is crucial for assessing energy allocation in fish for reproduction. It provides insights into energy allocation for growth versus reproduction and reveals shifts in energy use as fish approach maturity and invest more in gonadal development.\nTo proceed, select the needed columns for the analysis: the length, weight, and the sex columns.\n\nslw &lt;- speciesx[, list(length, weight, sex)]\n\nCompute the natural logarithm of the length and weight data. Taking the logarithm of both the length and weight transforms the data from an exponential relationship into a linear relationship. In a logarithmic scale, the exponential growth is represented as a straight line, making it easier to visualize and analyze the data.\n\nslw[, c(\"lnL\", \"lnW\") := list(log(length), log(weight))]\n\nThe above code computes the logarithmic scale of the length and weight data, and store it in columns “lnL” and “lnW,” respectively.\nBefore we continue with our analysis, it’s crucial to filter our dataset to include only male and female individuals. This is necessary because our dataset contains three unique values in the “sex” column, including an unspecified “U” category, which we are not focusing on for our current investigation. By selecting only the male and female individuals, we ensure that our analysis remains relevant and focused on the specific gender categories of interest.\n\nslw &lt;- slw[sex %in% c(\"M\", \"F\"), ]\n\nLet’s ensure we update the gender labels to their full names. This step is crucial for enhancing the clarity and comprehensibility of the graph we plan to create later. By replacing abbreviated labels with their complete names, we ensure that the audience can easily understand and interpret the information presented in the graph.\n\nslw[list(sex = c(\"M\", \"F\"), to = c(\"Male\", \"Female\")), on = \"sex\", sex := i.to]\n\nNow, let us make a scatter plot for each sex using the base graphics. There are many packages to make plots in R, but I will stick to the base R graphics because there’s no need to install additional packages. This is advantageous to avoid potential compatibility issues or reduce dependencies. Aside from this, base R graphics provide a high degree of flexibility to customize plots. Furthermore, users have complete control over the step-by-step process of creating a plot.\nBefore we proceed, let us make a variable that contains the sexes, since we will use this for the for loop function. It is a control flow statement used to repeatedly execute a block of code. In this example, we use a for loop to iterate over the sex group in the data set and create a scatter plot for each group using the plot() function.\n\nunique_sex &lt;- unique(slw$sex)\n\nWe will set the graphical parameters using the par() function. This function is used to set or query graphical parameters, allowing to control various aspects of plotting such as margins, font, axes, labels, and more. You can learn more about this by reading the documentation for this function (?par).\n\npar(mfrow = c(1, 2), mai = c(0.5, 0.5, 0.5, 0.2), omi = c(0.5, 0.5, 0, 0), \n    mgp = c(2.5, 0.5, 0))\n\nHere’s a breakdown of the parameters being set:\n\nmfrow = c(1, 2): This sets the layout of plots to be arranged in 1 row and 2 columns, meaning that subsequent plots will be arranged side by side horizontally.\nmai = c(0.5, 0.5, 0.5, 0.2): This sets the margin size for the individual plots. The mai parameter stands for “margin size” and takes a vector of four numerical values representing the margin sizes (bottom, left, top, right). In this case, the bottom, left, and top margins are set to 0.5 inches, while the right margin is set to 0.2 inches.\nomi = c(0.5, 0.5, 0, 0): This sets the outer margin size for the entire layout of plots. The omi parameter stands for “outer margin size” and takes a vector of four numerical values representing the margin sizes (bottom, left, top, right). In this case, the bottom and left outer margins are set to 0.5 inches, while the top and right outer margins are set to 0 inches.\nmgp = c(2.5, 0.5, 0): This sets the margin line for the axis title and labels. The mgp parameter stands for “margin line for the axis title and labels” and takes a vector of three numerical values representing the margin sizes (title, axis labels, axis line). In this case, the title margin is set to 2.5, the axis labels margin is set to 0.5, and the axis line margin is set to 0.\n\nThen, we will now make the scatter plot. The main usage of a scatter plot for determining the length-weight relationship in biology, particularly in studies related to fish or other organisms, is to visually inspect the pattern of association between the length (independent variable) and weight (dependent variable) of the organisms.\n\nfor(i in 1:length(unique_sex)){\n  x &lt;- slw[slw$sex == unique_sex[i], ]\n  plot(x$lnW ~ x$lnL, las = 1, tcl = -0.2, ylim = c(1, 6), xlim = c(1, 6),\n       ann = FALSE, axes = FALSE, col = \"blue4\")\n  abline(lm(x$lnW ~ x$lnL, data = x), col = \"coral1\", lwd = 3)\n  mtext(unique_sex[i],\n        side = 3, outer = FALSE, line = 0.25, font = 3)\n  axis(side = 1, at = seq(1, 6, 1), label = seq(1, 6, 1), las = 1, \n       tcl = -0.2)\n  axis(side = 2, at = seq(1, 6, 1), label = seq(1, 6, 1), las = 1, \n       tcl = -0.2)\n  text(x = 4, y = 1.75, cex = 0.5,\n       labels = eval(bquote(expression(italic(\n         W == .(round(exp(summary(lm(lnW ~ lnL, x[sex == unique_sex[i], ]))$coefficients[[1]]), digits = 5)) ~\n           L^.(round(summary(lm(lnW ~ lnL, x[sex == unique_sex[i], ]))$coefficients[[2]], digits = 2))*\",\" ~\n           r^2 == .(round(summary(lm(lnW ~ lnL, x[sex == unique_sex[i], ]))$r.squared, digits = 3)))))))\n}\n\nmtext(\"ln Weight (g)\", side = 2, adj = 0.5, font = 2, cex = 0.8,\n      outer = TRUE, xpd = TRUE)\n\nmtext(\"ln Length (cm)\", side = 1, adj = 0.5, font = 2, cex = 0.8,\n      outer = TRUE, xpd = TRUE)\n\nHere’s a brief explanation of what each part of the code does:\n\nLoop through unique sexes\n\n\nfor(i in 1:length(unique_sex)){\n\nThis loop iterates over each unique sex in the unique_sex vector.\n\nFilter data by sex\n\n\nx &lt;- slw[slw$sex == unique_sex[i], ]\n\nThis line filters the slw dataframe to only include rows where the sex column matches the current unique_sex[i] value.\n\nPlot data\n\n\nplot(x$lnW ~ x$lnL, las = 1, tcl = -0.2, ylim = c(1, 6), xlim = c(1, 6),\n       ann = FALSE, axes = FALSE, col = \"blue4\")\n\nThis line creates a scatter plot of lnW (log weight) against lnL (log length) for the filtered data. The plot has no annotations or axes, and the points are colored blue4.\n\nAdd regression line\n\n\nabline(lm(x$lnW ~ x$lnL, data = x), col = \"coral1\", lwd = 3)\n\nThis line adds a linear regression line (fit to the filtered data) to the plot in coral1 color with a line width of 3.\n\nAdd sex label\n\n\nmtext(unique_sex[i], side = 3, outer = FALSE, line = 0.25, font = 3)\n\nThis line adds a label to the top of the plot indicating the current sex being plotted.\n\nAdd axes\n\n\naxis(side = 1, at = seq(1, 6, 1), label = seq(1, 6, 1), las = 1, tcl = -0.2)\naxis(side = 2, at = seq(1, 6, 1), label = seq(1, 6, 1), las = 1, tcl = -0.2)\n\nThese lines add the x-axis and y-axis to the plot with ticks and labels from 1 to 6.\n\nAdd regression equation and R-squared\n\n\ntext(x = 4, y = 1.75, cex = 0.5,\n     labels = eval(bquote(expression(italic(\n       W == .(round(exp(summary(lm(lnW ~ lnL, x[sex == unique_sex[i], ]))$coefficients[[1]]), digits = 5)) ~\n         L^.(round(summary(lm(lnW ~ lnL, x[sex == unique_sex[i], ]))$coefficients[[2]], digits = 2))*\",\" ~\n         r^2 == .(round(summary(lm(lnW ~ lnL, x[sex == unique_sex[i], ]))$r.squared, digits = 3)))))))\n\nThis line adds text to the plot displaying the regression equation (W = q * L^b) (see Sparre and Venema (1998)) and the R-squared value of the fit. The equation and R-squared are dynamically calculated for each sex-specific subset of data.\n\nAdd overall y-axis label\n\n\nmtext(\"ln Weight (g)\", side = 2, adj = 0.5, font = 2, cex = 0.8,\n      outer = TRUE, xpd = TRUE)\n\nThis line adds an overall y-axis label “ln Weight (g)” to the outer margin of the plot area.\n\nAdd overall x-axis label\n\n\nmtext(\"ln Length (cm)\", side = 1, adj = 0.5, font = 2, cex = 0.8,\n      outer = TRUE, xpd = TRUE)\n\nThis line adds an overall x-axis label “ln Length (cm)” to the outer margin of the plot area.\nThis is the output of the above code:\n\nThe code snippet above generates a series of scatter plots with fitted regression lines for subsets of a data frame slw based on different values of the variable sex.\nTo verify the results of the linear regression, run the following code:\n\nslrel &lt;- slw[, c(reg.1 = as.list(coef(lm(lnW ~ lnL)))), by = sex]\n\nprint(slrel)\n\n      sex reg.1.(Intercept) reg.1.lnL\n   &lt;fctr&gt;             &lt;num&gt;     &lt;num&gt;\n1:   Male         -4.129150  2.775887\n2: Female         -5.474374  3.258168\n\n\n\nInterpretation\nIn analyzing the length-weight relationships of fish, distinct regression equations were derived for males and females based on empirical data. The equation for male fish,ln(Weight) = -4.129150 + 2.775887 ln(Length), and for female fish, ln(Weight) = -5.474374 + 3.258168 ln(Length), reflect different growth dynamics. These equations correspond to power functions W = 0.0161 L^{2.78} for males and W = 0.00419 L^{3.26} for females, aligning with the length-weight relationship framework (W = qL^b) discussed by Sparre and Venema (1998). According to this framework, the condition factor q, which adjusts the relationship based on population characteristics, is derived from the intercept a of the regression equation using q = exp(a). The intercept a sets the baseline ln⁡(Weight) when ln⁡(Length) is zero, while the slope determines how ln⁡(Weight) changes with ln⁡(Length). For male fish, the slope of 2.775887 indicates that weight increases by approximately 2.775887 units with each unit increase in length, whereas for female fish, with a slope of 3.258168, weight increases by approximately 3.258168 units per unit increase in length. This disparity in slopes suggests distinct growth dynamics between male and female fish, reflected in their respective growth exponents b of 2.78 and 3.26.\n\n\nBiological Insight\nThe higher slope for female fish (3.258168) compared to male fish (2.775887) suggests that female fish tend to gain weight more rapidly with increasing length than male fish. This could indicate differences in growth patterns or body composition between the sexes, which is valuable information for fisheries management and biological studies.\n\n\n\nReference\nSparre P, Venema SC. 1998. Introduction to tropical fish stock assessment, part 1: manual. Rome: Food and Agriculture Organization of the United Nations (FAO fisheries technical paper)."
  },
  {
    "objectID": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html",
    "href": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html",
    "title": "Histogram of length frequency distribution",
    "section": "",
    "text": "Update: January 16, 2018. Updated the post to include the data from FSA and FSAdata packages.\nIn our work, presenting the status of fish stocks is very important. It can help local fishers as well as Local Government Units (LGUs) in crafting an ordinance or measures to manage the fish stocks in their respective jurisdictions. The data cannot tell the real status unless it has a visual form, such as a graph or chart.\nOne of the graphs produced by my colleagues is based on the length-frequency distribution data. They used Microsoft Excel to create the graph, and manually drew rectangles inside the plot to differentiate the lengths of immature, mature, and mega-spawner fish of a single species.\nAbove is an example of the plot, but it is stacked according to the fishing gear used to catch that particular species (not shown).\nI find this tiring, especially in the context of reproducibility. If there are any changes to the raw data, they would have to perform a series of pivoting operations and manually produce the graph.\nTherefore, I tried to recreate the graph, with a few modifications, using R and the base R graphics.\nIn this tutorial, I wanted to produce a histogram of length frequency using the base R graphics system in R."
  },
  {
    "objectID": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#preliminary-steps",
    "href": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#preliminary-steps",
    "title": "Histogram of length frequency distribution",
    "section": "Preliminary Steps",
    "text": "Preliminary Steps\nTo follow this tutorial, you will need to install the following package.\n\ninstall.packages(\"data.table\")\n\nOnce installed, you can load it by typing:\n\nlibrary(data.table)"
  },
  {
    "objectID": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#the-data",
    "href": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#the-data",
    "title": "Histogram of length frequency distribution",
    "section": "The Data",
    "text": "The Data\nI used the CiscoTL data from the FSAdata repository. The meta-documentation for this data can be found here. I saved the data into a CSV file, which you can download here.\nYou can load the data into your R environment by running:\n\ncisco_data &lt;- data.table::fread(\"ciscoTL.csv\")"
  },
  {
    "objectID": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#the-process",
    "href": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#the-process",
    "title": "Histogram of length frequency distribution",
    "section": "The Process",
    "text": "The Process\nA histogram is a graphical representation that illustrates the distribution of a dataset. Unlike bar charts, which are typically used for categorical data, histograms are ideal for displaying continuous data, such as length measurements. Histograms are composed of bins, each representing a range of data values, and the height of each bin reflects the number of observations within that range.\nTo create an accurate histogram, it is essential to ensure that the data is in a consistent unit of measurement. For instance, if your length data is recorded in millimeters, you should convert it to centimeters before proceeding. This step standardizes the data and facilitates a more meaningful analysis. Here’s how you can do this conversion in R:\n\ncisco_data[, length_cm := length / 10]\n\nThe code above converts the length measurements in the length column from millimeters to centimeters and stores the result in a new column named length_cm within the cisco_data data table.\nWhen creating a histogram, it is crucial to specify the class interval (bin width). While there is no strict rule for determining the optimal class interval, it is up to the researcher to select a value that effectively represents the data distribution. The chosen interval should be large enough to reveal meaningful patterns in the data but not so large that it obscures important details.\n\nclass_interval &lt;- 1\n\nSuppose you decide on a class interval of 1 centimeter for your histogram. The next step is to bin the data accordingly. Binning organizes the data into discrete intervals (bins) of equal width, allowing for a clear visualization of the data distribution.\nHere’s how you can bin the data and create a histogram with a class interval of 1 centimeter in R:\n\nbrks &lt;- seq(0, ceiling(max(cisco_data$length_cm)), by = class_interval)\ncisco_data[, bins := cut(length_cm, brks, right = FALSE)]\n\nThe code above generates break points based on the specified class interval and bins the length_cm data accordingly, adding the bin information as a new column to the cisco_data data table.\nThe next step is to compute the mid-lengths of the binned data. The following code achieves this by extracting the lower and upper limits of each bin and then calculating their midpoints.\n\n# Replace brackets\n# This line removes the square brackets [ and ) from the bins column, making it \n# easier to split the bin ranges\ncisco_data[, bins := gsub(\"[\\\\[\\\\)]\", \"\", bins)]\n  \n# Split bin ranges\n# This splits the cleaned bins column into two new columns: llimit (lower limit) \n# and ulimit (upper limit) based on the comma delimiter.\ncisco_data[, c(\"llimit\", \"ulimit\") := tstrsplit(bins, \",\", fixed = TRUE)]\n  \n# Convert to numeric\n# This converts the llimit and ulimit columns from character to numeric type.\ncisco_data[, c(\"llimit\", \"ulimit\") := lapply(.SD, as.numeric), .SDcols = c(\"llimit\", \"ulimit\")]\n  \n# Calculate mid-lengths\n# This calculates the midpoint of each bin and stores it in a new column called\n# midlength.\ncisco_data[, midlength := (llimit + ulimit) / 2]\n\nBy setting the class interval boundaries midway between two numbers, we ensure that each data point falls squarely within a specific interval, avoiding ambiguity at the boundaries. This approach is crucial for accurately calculating the frequency of observations within each interval.\nWith the general bin values calculated, we now need to incorporate species-specific information. When presenting a length frequency distribution as a histogram, it is common practice to add a vertical line representing the length-at-first maturity (Lm) of the species. This value can typically be found in databases such as FishBase.\nFor the species Coregonus artedii, the length-at-first maturity (Lm) is 17.1 cm, as sourced from FishBase.\n\n\ncisco_lm_cm &lt;- 17.1\n\nFor mega-spawners, let’s assume their length is approximately 70% of the maximum length observed in our data. To estimate this, we simply multiply the maximum length by 0.7. While there are more precise methods to compute this value, we won’t delve into them here or use them for calculation purposes.\n\ncisco_megaspawner &lt;- (max(cisco_data$length_cm)) * 0.7\n\nWe can now create the graph. First, let’s create a variable to store the title of our graph.\n\nmy_title &lt;- expression(paste(\"Length frequency distribution of Cisco (\", italic(\"Coregonus artedi\"), \")\"))"
  },
  {
    "objectID": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#plotting",
    "href": "posts/2017-12-16-histogram-of-length-frequency-distribution/index.html#plotting",
    "title": "Histogram of length frequency distribution",
    "section": "Plotting",
    "text": "Plotting\nBefore proceeding, we’ll identify the maximum frequency in our length data. This information will be useful for ensuring appropriate scaling in our subsequent plots. By calculating maxFreq, we obtain the maximum frequency of observations in our dataset, which helps us determine appropriate scaling and visualization settings when plotting histograms or other frequency distributions.\n\n# Extract the maximum frequency\nmaxFreq &lt;- max(hist(cisco_data$length_cm, breaks = brks, plot = FALSE)$counts)\n\nThese are the step-by-step procedures on how to make the histogram and add annotations.\n\nThis code generates a histogram of the length_cm data from the cisco_data dataset. The breaks = brks argument specifies the bin breaks previously defined. xlab, ylab, and main are labels for the x-axis, y-axis, and main title of the plot, respectively. col sets the fill color of the bars, and border sets the border color of the bars.\n\n\nhist(cisco_data$length_cm, breaks = brks,\n     xlab = \"Length (cm)\", ylab = \"Frequency\", main = my_title,\n     col = \"#cc0000\", border = \"white\")\n\n\nThis code adds a rectangle to highlight the area representing juveniles in the histogram. rect() specifies the coordinates (xleft, ybottom, xright, ytop) for drawing the rectangle. col sets the fill color with transparency (alpha), and border = NA removes the border.\n\n\nrect(xleft = 0, ybottom = 0, xright = cisco_lm_cm, ytop = maxFreq + 50, col = rgb(0.4, 0.4, 0.4, alpha = 0.2), border = NA)\n\n\nThis code adds a rectangle to highlight the area representing megaspawners in the histogram. cisco_megaspawner is the position of the megaspawner, and max(cisco_data$length_cm) ensures the rectangle extends to the end of the histogram.\n\n\nrect(xleft = cisco_megaspawner, ybottom = 0, xright = max(cisco_data$length_cm), ytop = maxFreq + 50, col = rgb(0.475, 0.851, 1, alpha = 0.2), border = NA)\n\n\nThis code adds text to label the area representing juveniles, mature, and megaspawners in the histogram. text() specifies the coordinates (x, y) where the text is positioned. labels sets the text content, and cex controls the text size relative to the default (default is 1).\n\n\n# Add a text indicating the are as juvenile\ntext(x = 8, y = 500, labels = \"Juvenile\", cex = 0.8)\n\n# Add a text indicating the are as mature\ntext(x = 23, y = 500, labels = \"Mature\", cex = 0.8)\n\n# Add a text indicating the are as megaspawner\ntext(x = 33, y = 500, labels = \"Megaspawner\", cex = 0.8)\n\nThe output is shown at the end of this post.\nAdjust the coordinates, labels, colors, and sizes (cex) as needed to suit your specific data and presentation requirements.\nHere’s the complete code:\n\nhist(cisco_data$length_cm, breaks = brks,\n     xlab = \"Length (cm)\", ylab = \"Frequency\", main = my_title,\n     col = \"#cc0000\", border = \"white\")\n\n# Add a rectangle for the juveniles\nrect(xleft = 0, ybottom = 0, xright = cisco_lm_cm, ytop = maxFreq + 50, \n     col = rgb(0.4, 0.4, 0.4, alpha = 0.2), border = NA)\n\n# Add a rectangle for the megaspawner\nrect(xleft = cisco_megaspawner, ybottom = 0, xright = max(cisco_data$length_cm), \n     ytop = maxFreq + 50, col = rgb(0.475, 0.851, 1, alpha = 0.2), border = NA)\n\n# Add a text indicating the are as juvenile\ntext(x = 8, y = 500, labels = \"Juvenile\", cex = 0.8)\n\n# Add a text indicating the are as mature\ntext(x = 23, y = 500, labels = \"Mature\", cex = 0.8)\n\n# Add a text indicating the are as megaspawner\ntext(x = 33, y = 500, labels = \"Megaspawner\", cex = 0.8)\n\n\n\n\n\n\n\n\nI hope you enjoy following the tutorial. Please note that you may need to adjust and re-run the codes several times to produce your desired graph."
  },
  {
    "objectID": "posts/2018-05-30-create-pie-charts-that-show-the-composition-of-tuna-landed-catch-on-a-map-in-r/index.html",
    "href": "posts/2018-05-30-create-pie-charts-that-show-the-composition-of-tuna-landed-catch-on-a-map-in-r/index.html",
    "title": "Create pie charts that show the composition of tuna landed catch on a map in R",
    "section": "",
    "text": "2019-09-21: I recently revisited this post and attempted to recreate the plot using base R graphics, along with the mapplots and data.table packages for data manipulation.\nOn May 24-25, 2018, I attended the 9th WPEA-NSAP Tuna Catch Estimates Review Workshop in Ocean 101, Catangnan, General Luna (Siargao), Surigao del Norte. The workshop aimed to review the NSAP port sampling data collected in each region and compile information from BFAR regional offices for the annual catch estimates of tuna species.\nOne of the presentations I found interesting showed a map of fishing grounds in a region with a pie chart overlaid to show the landed catch composition of tuna. When I returned to the office, I tried to recreate the graph using the R language."
  },
  {
    "objectID": "posts/2018-05-30-create-pie-charts-that-show-the-composition-of-tuna-landed-catch-on-a-map-in-r/index.html#the-data",
    "href": "posts/2018-05-30-create-pie-charts-that-show-the-composition-of-tuna-landed-catch-on-a-map-in-r/index.html#the-data",
    "title": "Create pie charts that show the composition of tuna landed catch on a map in R",
    "section": "The data",
    "text": "The data\nI used data from the Philippine Statistics Authority (PSA), which is freely available on their website. I have pre-formatted the .csv file and made it available for download here.\nI analyzed the tuna production of marine municipal fisheries in the six provinces of Bicol Region from 2015 to 2017. I focused on three species of tuna: bigeye tuna, skipjack tuna, and yellowfin tuna."
  },
  {
    "objectID": "posts/2018-05-30-create-pie-charts-that-show-the-composition-of-tuna-landed-catch-on-a-map-in-r/index.html#the-process",
    "href": "posts/2018-05-30-create-pie-charts-that-show-the-composition-of-tuna-landed-catch-on-a-map-in-r/index.html#the-process",
    "title": "Create pie charts that show the composition of tuna landed catch on a map in R",
    "section": "The process",
    "text": "The process\nTo begin, let us load the needed packages.\n\nlibrary(mapdata)\nlibrary(mapplots)\nlibrary(data.table)\n\n\nData manipulation\nLet’s first examine our data before creating a graph.\n\nmunicipal &lt;- data.table::fread(\"municipal.csv\", header = TRUE)\n\nhead(municipal)\n\n          province        species    2015    2016    2017\n            &lt;char&gt;         &lt;char&gt;   &lt;num&gt;   &lt;num&gt;   &lt;num&gt;\n1:           Albay    Bigeye tuna  285.74  281.94  334.97\n2:           Albay       Skipjack    3.24   54.83  114.55\n3:           Albay Yellowfin tuna  262.57  262.66  289.43\n4: Camarines Norte    Bigeye tuna  448.39  627.51  620.60\n5: Camarines Norte       Skipjack 1347.72 1381.78 1215.91\n6: Camarines Norte Yellowfin tuna  713.83  474.89  382.25\n\n\nNext, we will create a new column that sums the values of the 2015, 2016, and 2017 columns. We will do this by summing the values in each row.\n\nmunicipal[, total := rowSums(.SD), .SDcols = 3:5]\n\nhead(municipal)\n\n          province        species    2015    2016    2017   total\n            &lt;char&gt;         &lt;char&gt;   &lt;num&gt;   &lt;num&gt;   &lt;num&gt;   &lt;num&gt;\n1:           Albay    Bigeye tuna  285.74  281.94  334.97  902.65\n2:           Albay       Skipjack    3.24   54.83  114.55  172.62\n3:           Albay Yellowfin tuna  262.57  262.66  289.43  814.66\n4: Camarines Norte    Bigeye tuna  448.39  627.51  620.60 1696.50\n5: Camarines Norte       Skipjack 1347.72 1381.78 1215.91 3945.41\n6: Camarines Norte Yellowfin tuna  713.83  474.89  382.25 1570.97\n\n\nNow, we will only select the province, species, and the total columns.\n\nmunicipal &lt;- municipal[, .(province, species, total)]\n\nWe will convert the data to a wide format to add the coordinates, and then convert it back to long format. (I am still unsure of the easiest way to do this.)\n\n# Convert to wide format\nmunicipal_wide &lt;- dcast(municipal, province ~ species, value.var = \"total\")\n\n# Add the coordinates of each province\nmunicipal_wide[, `:=` (lon = c(123.632377, 122.763304, 123.348615, 124.242160, 123.558856, 123.930399), \n                       lat = c(13.171977, 14.139026, 13.525020, 13.708868, 12.306024, 12.759986))]\n\n# Then convert back to long format\nmunicipal &lt;- melt(municipal_wide, id.vars = c(\"province\", \"lon\", \"lat\"))\n\nhead(municipal)\n\n          province      lon      lat    variable   value\n            &lt;char&gt;    &lt;num&gt;    &lt;num&gt;      &lt;fctr&gt;   &lt;num&gt;\n1:           Albay 123.6324 13.17198 Bigeye tuna  902.65\n2: Camarines Norte 122.7633 14.13903 Bigeye tuna 1696.50\n3:   Camarines Sur 123.3486 13.52502 Bigeye tuna  397.27\n4:     Catanduanes 124.2422 13.70887 Bigeye tuna  716.94\n5:         Masbate 123.5589 12.30602 Bigeye tuna 1314.28\n6:        Sorsogon 123.9304 12.75999 Bigeye tuna  362.89\n\n\n\n\nThe pie charts above the map\nWe will use the function draw.pie from the mapplots package. The documentation for this can be found at https://rdrr.io/cran/mapplots/man/draw.pie.html.\nThe final output is shown below:\n\nCamarines Norte has the highest tuna landing among the Bicol provinces, with skipjack tuna (Katsuwonus pelamis) as the dominant species. Yellowfin tuna (Thunnus albacares) is the dominant species in Camarines Sur and Catanduanes, while bigeye tuna (Thunnus obesus) is the dominant species in Masbate.\nI hope this is helpful!\n\n\nThe code to generate the plot\n\n# The area of the Bicol Region;\nxlim &lt;- c(122, 125)\nylim &lt;- c(11.5, 14.5)\n\n# Creates an xyz object for use with the function draw.pie\nxyz &lt;- make.xyz(municipal$lon, municipal$lat, municipal$value, municipal$variable)\n\n# Colors used\ncol &lt;- c(\"#003366\", \"#CCCC66\", \"#CC3366\")\n\n# The plot of the pie chart above the map\ntiff(\"pie-on-map.tiff\", width = 8, height = 5.5, units = \"in\",\n     res = 200, type = \"cairo\")\npar(mai = c(0.5, 0.5, 0.35, 0.2), omi = c(0.25, 0.5, 0, 0),\n    mgp = c(2.5, 0.5, 0), family = \"Liberation Serif\")\nbasemap(xlim = c(121, 126), ylim = c(11.5, 14.5), bg = \"white\",\n        main = \"Distribution of three major species of tuna in Bicol Region\")\nmap('world2Hires', xlim = xlim, ylim = ylim, add = TRUE)\ndraw.pie(xyz$x, xyz$y, xyz$z, radius = 0.3, col = col)\nlegend.pie(121.5, 11.75, labels = c(\"Bigeye\", \"Skipjack\", \"Yellowfin\"), \n           radius = 0.2, bty = \"n\", col = col, cex = 0.8, label.dist = 1.3)\ntext(121.5, 12.1, \"Tuna Species:\", cex = 0.8, font = 2)\ntext(123.4, 14.3, \"Camarines\\nNorte\", cex = 0.8, font = 2)\ntext(124.8, 13.75, \"Catanduanes\", cex = 0.8, font = 2)\ntext(122.9, 13.5, \"Camarines\\nSur\", cex = 0.8, font = 2)\ntext(124.1, 13.25, \"Albay\", cex = 0.8, font = 2)\ntext(124.3, 12.8, \"Sorsogon\", cex = 0.8, font = 2)\ntext(123.5, 12, \"Masbate\", cex = 0.8, font = 2)\nmtext(\"Data Source: Philippine Statistics Authority\", side = 1, outer = TRUE,\n      adj = 1, cex = 0.8, font = 3)\ndev.off()"
  },
  {
    "objectID": "papers/index.html",
    "href": "papers/index.html",
    "title": "Jethro Emmanuel",
    "section": "",
    "text": "Papers\n\n\n\n\nPapers\n\nClick “[PDF]” to download each paper.\n\n\n2020\n\n\nLanzuela NSB, Gallego EM, and Baltar JEPB. 2020. Reproductive biological performance of Otolithes ruber (Bloch and Schneider 1801) in San Miguel Bay, Philippines. The Philippine Journal of Fisheries; 27(2):1-10. https://doi.org/10.31398/tpjf/27.2.2019C0006 [PDF]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jethro Emmanuel",
    "section": "",
    "text": "Welcome to my blog! I’m Jethro Emmanuel, and I love using technology to explore and visualize data. I’ll be sharing my experiences and knowledge here.\nI’m a big fan of open-source software, especially the R programming language and QGIS. As a Linux user, I value the freedom and customization that open-source tools provide.\nOn this site I keep a list of my publications, as well as a technical blog.\n\n\n\n\n\n\n\nReproductive biological performance of Otolithes ruber (Bloch and Schneider 1801) in San Miguel Bay, Philippines. Lanzuela NSB, Gallego EM, and Baltar JEP. The Philippine Journal of Fisheries. 2020; 27(2):1-10. doi:https://doi.org/10.31398/tpjf/27.2.2019C0006\n\n\n\nfsaR | Fish Stock Assessment Utilities | 2023"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Jethro Emmanuel",
    "section": "",
    "text": "Welcome to my blog! I’m Jethro Emmanuel, and I love using technology to explore and visualize data. I’ll be sharing my experiences and knowledge here.\nI’m a big fan of open-source software, especially the R programming language and QGIS. As a Linux user, I value the freedom and customization that open-source tools provide.\nOn this site I keep a list of my publications, as well as a technical blog."
  },
  {
    "objectID": "index.html#selected-projects",
    "href": "index.html#selected-projects",
    "title": "Jethro Emmanuel",
    "section": "",
    "text": "Reproductive biological performance of Otolithes ruber (Bloch and Schneider 1801) in San Miguel Bay, Philippines. Lanzuela NSB, Gallego EM, and Baltar JEP. The Philippine Journal of Fisheries. 2020; 27(2):1-10. doi:https://doi.org/10.31398/tpjf/27.2.2019C0006\n\n\n\nfsaR | Fish Stock Assessment Utilities | 2023"
  },
  {
    "objectID": "posts/2023-02-06-plotting-gonado-somatic-index-in-r/index.html",
    "href": "posts/2023-02-06-plotting-gonado-somatic-index-in-r/index.html",
    "title": "Plotting gonado-somatic index in R",
    "section": "",
    "text": "Introduction\nThis is the third and final installment in our series on conducting a reproductive biology study of fish stocks. If you missed the earlier tutorials, you can find Part 1 here and Part 2 here. As before, we will continue working with the same dataset to explore and visualize fish gonado-somatic index.\n\n# Load the data.table package\nlibrary(data.table)\n\n# Import the data\nspeciesx &lt;- fread(\"reproductive-biology-data.csv\")\n\nDetermining the monthly Gonado-Somatic Index (GSI) of fish plays a pivotal role in fisheries biology and management. GSI data provides fundamental insights into the reproductive cycles of fish populations, allowing researchers to discern peak spawning periods, track seasonal variations in reproductive activity, and understand the timing of maturity onset. Moreover, GSI serves as a reliable indicator of reproductive potential, with higher index values indicating increased investment in gonad development and suggesting greater spawning success and population replenishment potential.\nThis information is crucial for guiding fisheries management practices, enabling the establishment of appropriate fishing quotas and seasonal closures to safeguard spawning fish and maintain sustainable harvests. Scientifically, GSI analysis supports broader investigations into factors influencing reproductive success, such as environmental conditions and human impacts. Conservation efforts benefit significantly from GSI data, as it helps assess the reproductive health of fish populations and informs prioritization of conservation actions to protect aquatic ecosystems and biodiversity.\nGSI analysis stands as a cornerstone in fisheries science, offering essential data for sustainable management, scientific research, and conservation initiatives.\n\n\nData processing\nWhen conducting analyses for a reproductive biology study of fish stocks, several steps are crucial to preparing and summarizing the data effectively. Initially, the process involves selecting pertinent columns from the dataset speciesx, such as sdate (sampling date), sex (indicating male “M” or female “F”), and gsi (Gonado-Somatic Index), which quantifies reproductive readiness. Sorting this data by sdate ensures chronological order, essential for temporal analysis.\n\ngsi &lt;- speciesx[, list(sdate, sex, gsi)][order(sdate)]\n\nNext, aggregation by sex and sampling date is performed to compute the average GSI (aveGSI). This step uses data.table syntax to group the data by sex and sdate, calculating the mean GSI within each group. This aggregation provides insights into the average reproductive condition across different sexes over time, aiding in understanding seasonal variations and reproductive cycles within the fish population.\n\ngsi &lt;- gsi[, list(aveGSI = mean(gsi)), by = list(sex, sdate)]\n\nAdditionally, recoding the abbreviated sex identifiers (“M” and “F”) to their complete terms (“Male” and “Female”) enhances clarity and interpretability of the data. This transformation ensures consistency in the representation of sexes throughout the analysis, facilitating straightforward interpretation of results and downstream visualizations.\n\ngsi[list(sex = c(\"M\", \"F\"), to = c(\"Male\", \"Female\")), on = \"sex\",\n    sex := i.to]\n\nHaving completed these preparatory steps, we are now ready to move forward with data visualization.\n\n\nData visualization\nData visualization is essential for interpreting trends and patterns in datasets. It allows us to present complex information graphically, making it easier to understand and analyze. The code below demonstrates how to create a multi-panel plot showing the average GSI per month, using base R graphics:\n\npar(mfrow = c(2, 1), mar = c(5, 4, 2, 2), oma = c(3, 2, 2, 2),\n    mgp = c(2.5, 0.5, 0))\n\nssex &lt;- unique(gsi$sex)\n\nfor(i in 1:length(ssex)){\n  x &lt;- gsi[gsi$sex == ssex[i], ]\n  plot(x$aveGSI ~ x$sdate, type = \"o\", las = 1, pch = 16, tcl = -0.2, lwd = 2,\n       col = \"blue4\",\n       ann = FALSE, axes = FALSE, ylim = c(0, 4))\n  mtext(ssex[i], side = 3, outer = FALSE, line = 0.25, font = 3)\n  axis.Date(\n    side = 1,\n    at = seq(min(x$sdate), max(x$sdate), by = \"1 mon\"),\n    format = \"%b\",\n    tcl = -0.2\n  )\n  axis(\n    side = 2,\n    at = seq(0, 4, 1),\n    label = format(round(seq(0, 4, 1)), nsmall = 2),\n    las = 1,\n    tcl = -0.2\n  )\n}\n\nmtext(\"Average gonado-somatic index (GSI)\", side = 2, adj = 0.5, font = 2, \n      las = 3, outer = TRUE)\n\nmtext(\"Months\", side = 1, adj = 0.5, font = 2, outer = TRUE, xpd = TRUE)\n\n\n\n\n\n\n\n\nBreakdown and brief explanation of the code above:\n\nThis code sets up a 2x1 layout for plotting (par(mfrow = c(2, 1)), allowing two plots stacked vertically. Parameters such as margins (mar), outer margins (oma), and axis properties (mgp) are adjusted for layout and readability.\nLoop through unique sexes: It iterates over unique values of sex in the gsi dataset (ssex &lt;- unique(gsi$sex)).\nPlotting: For each sex, a scatter plot (plot(x$aveGSI ~ x$sdate, type = \"o\", ...)) of average GSI (aveGSI) against sampling dates (sdate) is created. Options include point type (pch), line type (type), line width (lwd), and color (col).\nCustomizing axes:\n\naxis.Date(side = 1, ...) formats the x-axis with monthly ticks (at = seq(...) and format = \"%b\" for abbreviated month names).\naxis(side = 2, ...) sets ticks and labels for the y-axis.\n\nAnnotation:\n\nmtext(ssex[i], ...) labels each panel with the corresponding sex (ssex[i]).\nmtext(\"Average gonado-somatic index (GSI)\", ...) and mtext(\"Months\", ...) add overall axis labels for the entire plot.\n\n\n\n\nInterpretation\nThe average Gonado-Somatic Index (GSI) of males and females shows synchronization, indicating similar reproductive patterns across sexes. The highest average GSI values are consistently observed from July to December for both males and females. This period likely corresponds to peak reproductive activity, characterized by increased gonadal development and readiness for spawning. This synchronized peak suggests a seasonal breeding cycle influenced by environmental factors such as temperature and photoperiod, influencing reproductive physiology in fish populations. Understanding these patterns is crucial for fisheries management and conservation efforts, ensuring sustainable exploitation of fish stocks during their most reproductive periods."
  },
  {
    "objectID": "posts/2023-01-27-visualizing-fish-gonadal-stages-with-r/index.html",
    "href": "posts/2023-01-27-visualizing-fish-gonadal-stages-with-r/index.html",
    "title": "Visualizing fish gonadal stages with R",
    "section": "",
    "text": "This tutorial continues from the previous one on conducting a reproductive biology study of fish stocks, which can be found here. In this session, we focus on plotting gonadal stages using the same dataset discussed earlier.\n\n# Load the data.table package\nlibrary(data.table)\n\n# Import the data\nspeciesx &lt;- fread(\"reproductive-biology-data.csv\")\n\nAnalyzing gonadal maturity stages of fish is fundamental for effective fisheries management, sustainable utilization of fishery resources, understanding fish biology, and supporting conservation efforts, particularly, for marine ecosystems."
  },
  {
    "objectID": "posts/2023-01-27-visualizing-fish-gonadal-stages-with-r/index.html#for-female",
    "href": "posts/2023-01-27-visualizing-fish-gonadal-stages-with-r/index.html#for-female",
    "title": "Visualizing fish gonadal stages with R",
    "section": "For female",
    "text": "For female\n\npar(mar = c(5, 4, 4, 5), oma = c(0.5, 1, 0, 0), xpd = TRUE)\n\nbarplot(sstagef,\n        beside = FALSE,\n        col = mycol,\n        border = \"white\",\n        main = \"Maturity Percentage per Month (Female)\",\n        ylab = \"Percentage\",\n        xlab = \"Month\",\n        tcl = -0.2)\n\nlegend(\"topright\", inset = c(-0.1, 0),\n       legend = rownames(sstagef), fill = mycol, col = mycol, \n       bty = \"n\", border = NA, title = \"Stages\")"
  },
  {
    "objectID": "posts/2023-01-27-visualizing-fish-gonadal-stages-with-r/index.html#for-male",
    "href": "posts/2023-01-27-visualizing-fish-gonadal-stages-with-r/index.html#for-male",
    "title": "Visualizing fish gonadal stages with R",
    "section": "For male",
    "text": "For male\n\npar(mar = c(5, 4, 4, 5), oma = c(0.5, 1, 0, 0), xpd = TRUE)\n\nbarplot(sstagem,\n        beside = FALSE,\n        col = mycol,\n        border = \"white\",\n        main = \"Maturity Percentage per Month (Male)\",\n        ylab = \"Percentage\",\n        xlab = \"Month\",\n        tcl = -0.2)\n\nlegend(\"topright\", inset = c(-0.1, 0),\n       legend = rownames(sstagem), fill = mycol, col = mycol, \n       bty = \"n\", border = NA, title = \"Stages\")\n\n\n\n\n\n\n\n\nWhat insights can you derive from these results?"
  },
  {
    "objectID": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html",
    "href": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html",
    "title": "Small multiple charts for length frequency distribution",
    "section": "",
    "text": "This tutorial continues from the previous one, where we created a histogram with annotations for length-at-first maturity, juveniles, mature, and mega-spawners. In this tutorial, we will learn how to display a subset of the data, also known as small multiples. This type of graph is useful for comparing data across groups, such as the length frequency distribution of a species by fishing gear."
  },
  {
    "objectID": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html#preliminaries",
    "href": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html#preliminaries",
    "title": "Small multiple charts for length frequency distribution",
    "section": "Preliminaries",
    "text": "Preliminaries\nTo begin, let us load the required packages.\n\nlibrary(data.table)\n\nWe will use again the data of Coregonus artedii.\n\ncisco_data &lt;- data.table::fread(\"ciscoTL.csv\")\n\nAdditionally, we will use the objects (variables) from the previous tutorial:\n\nclass_interval &lt;- 1\ncisco_lm_cm &lt;- 17.1"
  },
  {
    "objectID": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html#plotting",
    "href": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html#plotting",
    "title": "Small multiple charts for length frequency distribution",
    "section": "Plotting",
    "text": "Plotting\n\nLength frequency distribution by fishing gear\nWe will now display the length frequency distribution by gear ID. There are 9 fishing gears used to catch this species in our data.\n\n# Get the unique fishing gears in the data\nunique_gears &lt;- unique(cisco_data$gearid)\n\n# Prepare histogram data for each Gear ID with specified breaks\ngear_hist_data &lt;- lapply(unique_gears, function(gear) {\n  hist(subset(cisco_data, gearid == gear)$length_cm, breaks = brks, plot = FALSE)\n})\n\n# Find the maximum frequency across all gears\nmax_frequency &lt;- max(sapply(gear_hist_data, function(hist_data) {\n  max(hist_data$counts)\n}))\n\n# get the number of unique fishing gears\nnum_gears &lt;- length(unique_gears)\n\n# Calculate layout dimensions\nnum_cols_gears &lt;- ceiling(sqrt(num_gears))\nnum_rows_gears &lt;- ceiling(num_gears / num_cols_gears)\n\npar(mfrow = c(num_rows_gears, num_cols_gears), mai = c(0.5, 0.5, 0.35, 0.5), \n    omi = c(0.25, 0.25, 0.5, 0.5), mgp = c(2.5, 0.5, 0))\n\n# Plot histograms with dynamic y-axis limits\nfor (i in 1:length(unique_gears)) {\n  hist(subset(cisco_data, gearid == unique_gears[i])$length_cm,\n       breaks = brks,\n       freq = TRUE,\n       ann = FALSE,\n       ylim = c(0, max_frequency),\n       col = \"lightblue\",\n       border = \"black\")\n  mtext(unique_gears[i], side = 3, line = 0.25, font = 3, outer = FALSE)\n}\n\nmtext(\"Length (in cm)\", side = 1, font = 2, adj = 0.5, outer = TRUE, xpd = TRUE)\nmtext(\"Frequency\", side = 2, font = 2, adj = 0.5, outer = TRUE, xpd = TRUE)\nmtext(expression(paste(\"Length Frequency of Cisco (\", italic(\"Coregonus artedi\"), \") per Gear\")),\n      side = 3, font = 2, adj = 0.5, cex = 1.2, outer = TRUE, xpd = TRUE)\n\n\n\n\n\n\n\n\nLet’s break down and explain what each section of this code does:\n\nIdentify unique gear IDs\n\n\nunique_gears &lt;- unique(cisco_data$gearid)\n\nThis code identifies the unique gear IDs present in the dataset cisco_data. unique(cisco_data$gearid) returns a vector of unique gear IDs, which is stored in the variable unique_gears.\n\nPrepare histogram data for each gear ID\n\n\n# Prepare histogram data for each Gear ID with specified breaks\ngear_hist_data &lt;- lapply(unique_gears, function(gear) {\n  hist(subset(cisco_data, gearid == gear)$length_cm, breaks = brks, plot = FALSE)\n})\n\nThis section uses lapply() to iterate over each unique gear ID, generating histogram data for the length of fish (length_cm) caught by each gear. The hist() function calculates the histogram without plotting it (plot = FALSE), and the results are stored in gear_hist_data. The histograms use predefined breaks (brks).\n\nFind the maximum frequency across all gears\n\n\n# Find the maximum frequency across all gears\nmax_frequency &lt;- max(sapply(gear_hist_data, function(hist_data) {\n  max(hist_data$counts)\n}))\n\nThis calculates the maximum frequency (the highest count in any bin of the histograms) across all gears. sapply() is used to extract the maximum count from each histogram’s counts vector, and max() finds the highest value among these maxima, stored in max_frequency.\n\nCalculate layout dimensions\n\n\n# Get the number of unique fishing gears\nnum_gears &lt;- length(unique_gears)\n\n# Calculate layout dimensions\nnum_cols_gears &lt;- ceiling(sqrt(num_gears))\nnum_rows_gears &lt;- ceiling(num_gears / num_cols_gears)\n\nThis part calculates the layout dimensions for plotting multiple histograms. It determines the number of rows and columns needed to fit all histograms in a grid, aiming for a nearly square layout. num_cols_gears and num_rows_gears represent the number of columns and rows in the grid, respectively.\n\nSet up plotting area\n\n\npar(mfrow = c(num_rows_gears, num_cols_gears), mai = c(0.5, 0.5, 0.35, 0.5), \n    omi = c(0.25, 0.25, 0.5, 0.5), mgp = c(2.5, 0.5, 0))\n\nThis configures the plotting parameters using par:\n\nmfrow = c(num_rows_gears, num_cols_gears) sets the layout to a grid with the specified number of rows and columns.\nmai specifies the margins of individual plots (bottom, left, top, right), in inches.\nomi sets the outer margins for the entire plotting area, in inches.\nmgp adjusts the margin line settings for axis labels.\n\n\nPlot histograms\n\n\n# Plot histograms with dynamic y-axis limits\nfor (i in 1:length(unique_gears)) {\n  hist(subset(cisco_data, gearid == unique_gears[i])$length_cm,\n       breaks = brks,\n       freq = TRUE,\n       ann = FALSE,\n       ylim = c(0, max_frequency),\n       col = \"lightblue\",\n       border = \"black\")\n  mtext(unique_gears[i], side = 3, line = 0.25, font = 3, outer = FALSE)\n}\n\nThis loop iterates over each unique Gear ID, plotting a histogram for each one:\n\nsubset(cisco_data, gearid == unique_gears[i])$length_cm extracts the length data for the current gear.\nbreaks = brks uses the predefined breaks.\nylim = c(0, max_frequency) sets the y-axis limit to the maximum frequency found earlier.\ncol = \"lightblue\" and border = \"black\" set the colors of the histogram bars and borders.\nmtext(unique_gears[i], side = 3, line = 0.25, font = 3, outer = FALSE) adds the Gear ID as a title above each histogram.\n\n\nAdd common axis labels and title\n\n\nmtext(\"Length (in cm)\", side = 1, font = 2, adj = 0.5, outer = TRUE, xpd = TRUE)\nmtext(\"Frequency\", side = 2, font = 2, adj = 0.5, outer = TRUE, xpd = TRUE)\nmtext(expression(paste(\"Length Frequency of Cisco (\", italic(\"Coregonus artedi\"), \") per Gear\")),\n      side = 3, font = 2, adj = 0.5, cex = 1.2, outer = TRUE, xpd = TRUE)\n\n\n\nLength frequency distribution by year\nTo gain further insights, we will analyze the length frequencies of fish caught per year. Given the extensive dataset spanning 26 years, we will focus on a subset of five years for simplicity and clarity.\nFor this tutorial, we will create a new data frame focusing on the years 2002, 2003, 2004, 2005, and 2006.\n\ncisco_data5 &lt;- cisco_data[year4 %in% c(2002, 2003, 2004, 2005, 2006)]\n\nThis code filters the original dataset to include only the data from the specified years, storing the result in cisco_data5.\nHere’s how to plot a histogram for each year. I won’t go into detail about each line of code, as the process is similar to what was explained earlier. The primary differences are the data source and variable names.\n\n# Get the unique years in the data\nunique_years &lt;- unique(cisco_data5$year4)\n\n# Prepare histogram data for each year with specified breaks\nyear_hist_data &lt;- lapply(unique_years, function(year) {\n  hist(subset(cisco_data5, year4 == year)$length_cm, breaks = brks, plot = FALSE)\n})\n\n# Find the maximum frequency across all years\nmax_frequency &lt;- max(sapply(year_hist_data, function(hist_data) {\n  max(hist_data$counts)\n}))\n\n# get the number of unique years\nnum_years &lt;- length(unique_years)\n\n# Calculate layout dimensions\nnum_cols_years &lt;- ceiling(sqrt(num_years))\nnum_rows_years &lt;- ceiling(num_years / num_cols_years)\n\npar(mfrow = c(num_rows_years, num_cols_years), mai = c(0.5, 0.5, 0.5, 0.2), \n    omi = c(0.25, 0.25, 0.5, 0.25), mgp = c(2.5, 0.5, 0))\n\nfor (i in 1:length(unique_years)) {\n  hist(subset(cisco_data, year4 == unique_years[i])$length_cm,\n       breaks = brks,\n       freq = TRUE,\n       ann = FALSE,\n       ylim = c(0, max_frequency),\n       col = \"lightblue\",\n       border = \"black\")\n  mtext(unique_years[i], side = 3, line = 0.25, font = 3, outer = FALSE)\n}\n\nmtext(\"Length (in cm)\", side = 1, font = 2, adj = 0.5, outer = TRUE, xpd = TRUE)\nmtext(\"Frequency\", side = 2, font = 2, adj = 0.5, outer = TRUE, xpd = TRUE)\nmtext(expression(paste(\"Length frequency of Cisco (\", italic(\"Coregonus artedi\"), \") per Year\")), \n      side = 3, font = 2, adj = 0.5, cex = 1.2, outer = TRUE, xpd = TRUE)"
  },
  {
    "objectID": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html#conclusion",
    "href": "posts/2018-01-25-small-multiple-charts-for-length-frequency-distribution/index.html#conclusion",
    "title": "Small multiple charts for length frequency distribution",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You’ve successfully created a small multiples plot using base R graphics functions. This process is straightforward, particularly when subsetting a single variable.\nOne of the greatest advantages of this method is its reproducibility. Since the plot is generated from the data frame rather than individual values, you can easily update the original data without needing to make manual adjustments to the plot.\nI hope you found this short tutorial enjoyable!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]